package ru.nabokovsg.company.services;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ru.nabokovsg.company.dto.exploitationRegion.ExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.FullExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.ShortExploitationRegionDto;
import ru.nabokovsg.company.exceptions.NotFoundException;
import ru.nabokovsg.company.mappers.ExploitationRegionMapper;
import ru.nabokovsg.company.repository.ExploitationRegionRepository;
import ru.nabokovsg.company.models.ExploitationRegion;

import java.util.List;
import java.util.Objects;

@Service
@RequiredArgsConstructor
public class ExploitationRegionServiceImpl implements ExploitationRegionService {

    private final ExploitationRegionRepository repository;
    private final ExploitationRegionMapper mapper;
    private final HeatSupplyAreaService areaService;

    @Override
    public ShortExploitationRegionDto save(ExploitationRegionDto regionDto) {
        return mapper.mapToShortExploitationRegionDto(
                Objects.requireNonNullElseGet(repository.findByFullName(regionDto.getFullName())
                        , () -> repository.save(mapper.mapToNewExploitationRegion(regionDto
                                                               , areaService.getById(regionDto.getHeatSupplyAreaId()))))
        );
    }

    @Override
    public ShortExploitationRegionDto update(ExploitationRegionDto regionDto) {
        if (repository.existsById(regionDto.getId())) {
            return mapper.mapToShortExploitationRegionDto(
                    repository.save(
                            mapper.mapToUpdateExploitationRegion(regionDto
                                                                , areaService.getById(regionDto.getHeatSupplyAreaId())))
            );
        }
        throw new NotFoundException(
                String.format("ExploitationRegion with name=%s not found for update.", regionDto.getShortName()));
    }

    @Override
    public FullExploitationRegionDto get(Long id) {
        return mapper.mapToFullExploitationRegionDto(getById(id));
    }

    @Override
    public ExploitationRegion getById(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new NotFoundException(
                        String.format("ExploitationRegion with id=%s not found.", id)));
    }

    @Override
    public List<ShortExploitationRegionDto> getAll(Long areaId) {
        return repository.findByAreaId(areaId)
                         .stream()
                         .map(mapper::mapToShortExploitationRegionDto)
                         .toList();
    }

    @Override
    public void delete(Long id) {
        if (repository.existsById(id)) {
            repository.deleteById(id);
            return;
        }
        throw new NotFoundException(String.format("ExploitationRegion with id=%s not found for delete.", id));
    }
}